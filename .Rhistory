# Run the application
# shinyApp(ui = ui, server = server)
runApp()
result_raster_counter
result_raster_counter
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
source("server_functions.R") # Source server functions
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
This repository contains the code for the Semeando project, which is focused on analyzing and visualizing least-cost paths in geographical data.
source("global.R") # Global settings, e.g. reading in of packages, data
install.packages("remotes")
install.packages("remotes")
# Function to check if a package is installed, if not, install it
install_if_needed <- function(package, github_repo = NULL) {
if (!requireNamespace(package, quietly = TRUE)) {
if (!is.null(github_repo)) {
message(paste(package, "is not installed. Installing from GitHub repository:", github_repo))
remotes::install_github(github_repo)
} else {
message(paste(package, "is not installed. Installing from CRAN."))
install.packages(package)
}
} else {
message(paste(package, "is already installed."))
}
}
# Check and install the 'icons' package from GitHub if not already installed
install_if_needed("icons", github_repo = "mitchelloharawild/icons")
# Packages list
packages <- c("shiny", "leaflet", "raster", "DT", "shinyWidgets",
"sf", "leafem", "mapview", "gdistance", "dplyr",
"shinyFiles", "zip", "leaflet.extras",
"shinyjs", "classInt", "leastcostpath", "terra", "units", "tools",
"shinyalert", "icons", "fontawesome", "RColorBrewer")
# Instalar pacotes que não estão instalados
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) {
install.packages(new_packages)
}
# Load required packages ----
library("classInt")
library("dplyr")
library ("DT")
library("fontawesome")
library("gdistance")
library("icons")
library("leafem")
library("leaflet")
library("leaflet.extras")
library("mapview")
library("raster")
library("RColorBrewer")
library("shiny")
library("shinyFiles")
library("shinyWidgets")
library("shinyalert")
library("shinyjs")
library("sf")
library("terra")
library("tools")
library("units")
library("zip")
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1AR3T45pZ2y5CO1A2PYKXn4HxVh9xyB7CZnjnY1zy26E/edit?usp=sharing")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_shapefiles
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
# lists spatial objects in the global environment
shapefiles <- Filter(function(x) inherits(get(x, envir = .GlobalEnv), "sf"), ls(envir = .GlobalEnv))
shapefiles
raster_layers <- Filter(function(x) inherits(get(x, envir = .GlobalEnv), "SpatRaster"), ls(envir = .GlobalEnv))
raster_layers
for (object in shapefiles) {
# Check if the object is a shapefile
if (inherits(get(object, envir = .GlobalEnv), "sf")) {
default_shapefiles[[object]] <- get(object, envir = .GlobalEnv)
}
}
default_shapefiles
default_shapefiles[[object]] <- get(object, envir = .GlobalEnv)
# Add the objects to the reactive lists based on their type
# lists spatial objects in the global environment
if (inherits(get(object, envir = .GlobalEnv), "sf")) {
default_shapefiles[[object]] <- get(object, envir = .GlobalEnv)
}
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
# Add the objects to the reactive lists based on their type
# lists spatial objects in the global environment
if (inherits(get(object, envir = .GlobalEnv), "sf")) {
default_shapefiles[[object]] <- get(object, envir = .GlobalEnv)
}
default_shapefiles
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c())
ls()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
custom_control
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Function to classify objects in the global environment and reproject sf objects
CategorizeAndReprojectObjectsInGlobalEnv <- function() {
# Get all object names in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Loop through each object to check its class and categorize
for (object_name in all_objects) {
obj <- get(object_name, envir = .GlobalEnv)
# Check if the object is a GeoJSON (sf)
if (inherits(obj, "sf")) {
# Reproject to WGS 84 (EPSG:4326)
obj <- st_transform(obj, crs = 4326)
# Update the object in the global environment
assign(object_name, obj, envir = .GlobalEnv)
# Assign to the default_shapefiles list
default_shapefiles[[object_name]] <- obj
}
# Check if the object is a Raster (SpatRaster)
if (inherits(obj, "SpatRaster")) {
# Assign to the default_layers list
default_layers[[object_name]] <- obj
}
}
# Print a summary of categorized objects
message("Shapefiles assigned to list: ", paste(names(default_shapefiles), collapse = ", "))
message("Rasters assigned to list: ", paste(names(default_layers), collapse = ", "))
# Assign the lists to the global environment
assign("default_shapefiles", default_shapefiles, envir = .GlobalEnv)
assign("default_layers", default_layers, envir = .GlobalEnv)
}
# Example usage:
# Call the function to categorize and reproject already loaded objects
# CategorizeAndReprojectObjectsInGlobalEnv()
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c())
custom_control
# This is the main app page, which will run and read in all the other pages
# and modules, and render the dashboard
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Run the application
# shinyApp(ui = ui, server = server)
runApp()
